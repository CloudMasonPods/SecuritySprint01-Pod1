apiVersion: v1
kind: Pod
metadata:
  name: debug-pod
  namespace: tekton-cicd
spec:
  containers:
  - name: debug-container
    image: alpine:latest
    command: ["/bin/sh"]
    args: ["-c", "sleep 3600"]
    volumeMounts:
    - mountPath: /workspace/shared-data
      name: shared-data  # Corrected volume name
  restartPolicy: Never
  volumes:
  - name: shared-data  # Corrected volume name
    persistentVolumeClaim:
      claimName: tektonpvc  # Ensure correct PVC name



#       # task-git-clone.yaml
# apiVersion: tekton.dev/v1beta1
# kind: Task
# metadata:
#   name: git-clone
#   namespace: tekton-cicd
# spec:
#   params:
#   - name: url
#     type: string
#   - name: revision
#     type: string
#     default: main
#   workspaces:
#   - name: source
#     description: The git repo will be cloned onto the volume backing this workspace
#   steps:
#   - name: clone
#     image: alpine/git
#     script: |
#       git clone $(params.url) $(workspaces.source.path)/repo
#       cd $(workspaces.source.path)/repo
#       git checkout $(params.revision)

# # pipeline-git-clone.yaml
# apiVersion: tekton.dev/v1beta1
# kind: Pipeline
# metadata:
#   name: git-clone-pipeline
#   namespace: tekton-cicd
# spec:
#   params:
#   - name: git-url
#     type: string
#   - name: git-revision
#     type: string
#     default: main
#   workspaces:
#   - name: shared-data
#   tasks:
#   - name: fetch-repository
#     taskRef: #refrence task 
#       name: git-clone
#     params:
#     - name: url
#       value: $(params.git-url)
#     - name: revision
#       value: $(params.git-revision)
#     workspaces:
#     - name: source  #workspace where the cloned repo its stored
#       workspace: shared-data

# # pipelinerun-git-clone.yaml
# apiVersion: tekton.dev/v1beta1
# kind: PipelineRun
# metadata:
#   name: git-clone-pipeline-run
#   namespace: tekton-cicd
# spec:
#   pipelineRef:
#     name: git-clone-pipeline
#   params:
#   - name: git-url
#     value: "https://github.com/CloudMasonPods/SecuritySprint01-Pod1.git"
#   - name: git-revision
#     value: main #if the git-revision is left blank the default from the task would then 
#   workspaces:
#   - name: shared-data
#     volumeClaimTemplate:
#       spec:
#         accessModes:
#         - ReadWriteOnce
#         resources:
#           requests:
#             storage: 1Gi
#       # task-check-dockerfile.yaml
# apiVersion: tekton.dev/v1beta1
# kind: Task
# metadata:
#   name: check-dockerfile
#   namespace: tekton-cicd
# spec:
#   params: []
#   workspaces:
#   - name: source
#     description: The workspace containing the cloned Git repository
#   steps:
#   - name: check-dockerfile
#     image: alpine/git
#     script: |
#       if [ -f "$(workspaces.source.path)/repo/Dockerfile" ]; then
#         echo "Dockerfile exists"
#       else
#         echo "Dockerfile does not exist"
#         exit 1
#       fi
# # taskrun-check-dockerfile.yaml
# apiVersion: tekton.dev/v1beta1
# kind: TaskRun
# metadata:
#   name: check-dockerfile-run
#   namespace: tekton-cicd
# spec:
#   taskRef:
#     name: check-dockerfile
#   workspaces:
#   - name: source
#     persistentVolumeClaim:
#       claimName: pvc-96573cc7e9  # Name of the PVC where the cloned repository is stored this can be gottten by scanning the namespaqce for a pvc
      


# apiVersion: tekton.dev/v1beta1
# kind: Task
# metadata:
#   name: build-dockerfile
#   namespace: tekton-cicd
# spec:
#   params:
#   - name: image-name
#     type: string
#     description: The name of the image to build
#   workspaces:
#   - name: source-build-workspace-2  # Changed workspace name to ensure uniqueness
#     description: The workspace containing the cloned Git repository for building
#   steps:
#   - name: build
#     image: gcr.io/kaniko-project/executor:latest
#     env:
#     - name: DOCKER_CONFIG
#       value: /kaniko/.docker
#     command:
#     - /kaniko/executor
#     - --dockerfile=/workspace/source-build-workspace-2/repo/Dockerfile  # Updated volume mount path
#     - --context=/workspace/source-build-workspace-2
#     - --destination=$(params.image-name)
#     - --no-push


# apiVersion: tekton.dev/v1beta1
# kind: TaskRun
# metadata:
#   name: build-dockerfile-taskrun
#   namespace: tekton-cicd
# spec:
#   taskRef:
#     name: build-dockerfile
#   params:
#   - name: image-name
#     value: eth-test-tekton
#   workspaces:
#   - name: source-build-workspace-2
#     persistentVolumeClaim:
#       claimName: pvc-96573cc7e9